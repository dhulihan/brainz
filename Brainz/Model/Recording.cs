// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using QuickType;
//
//    var recordingResponse = RecordingResponse.FromJson(jsonString);

namespace Brainz.Recording
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class RecordingResponse
    {
        [JsonProperty("media")]
        public Media[] Media { get; set; }

        [JsonProperty("packaging-id")]
        public Guid PackagingId { get; set; }

        [JsonProperty("quality")]
        public string Quality { get; set; }

        [JsonProperty("country")]
        public string Country { get; set; }

        [JsonProperty("title")]
        public string Title { get; set; }

        [JsonProperty("disambiguation")]
        public string Disambiguation { get; set; }

        [JsonProperty("packaging")]
        public string Packaging { get; set; }

        [JsonProperty("release-events")]
        public ReleaseEvent[] ReleaseEvents { get; set; }

        [JsonProperty("date")]
        public DateTimeOffset Date { get; set; }

        [JsonProperty("cover-art-archive")]
        public CoverArtArchive CoverArtArchive { get; set; }

        [JsonProperty("id")]
        public Guid Id { get; set; }

        [JsonProperty("asin")]
        public object Asin { get; set; }

        [JsonProperty("text-representation")]
        public TextRepresentation TextRepresentation { get; set; }

        [JsonProperty("status")]
        public string Status { get; set; }

        [JsonProperty("barcode")]
        public string Barcode { get; set; }

        [JsonProperty("status-id")]
        public Guid StatusId { get; set; }
    }

    public partial class CoverArtArchive
    {
        [JsonProperty("count")]
        public long Count { get; set; }

        [JsonProperty("artwork")]
        public bool Artwork { get; set; }

        [JsonProperty("back")]
        public bool Back { get; set; }

        [JsonProperty("front")]
        public bool Front { get; set; }

        [JsonProperty("darkened")]
        public bool Darkened { get; set; }
    }

    public partial class Media
    {
        [JsonProperty("format")]
        public string Format { get; set; }

        [JsonProperty("tracks")]
        public Track[] Tracks { get; set; }

        [JsonProperty("format-id")]
        public Guid FormatId { get; set; }

        [JsonProperty("position")]
        public long Position { get; set; }

        [JsonProperty("track-count")]
        public long TrackCount { get; set; }

        [JsonProperty("title")]
        public string Title { get; set; }

        [JsonProperty("track-offset")]
        public long TrackOffset { get; set; }
    }

    public partial class Track
    {
        [JsonProperty("position")]
        public long Position { get; set; }

        [JsonProperty("id")]
        public Guid Id { get; set; }

        [JsonProperty("length")]
        public long Length { get; set; }

        [JsonProperty("title")]
        public string Title { get; set; }

        [JsonProperty("number")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long Number { get; set; }

        [JsonProperty("recording")]
        public Recording Recording { get; set; }
    }

    public partial class Recording
    {
        [JsonProperty("disambiguation")]
        public string Disambiguation { get; set; }

        [JsonProperty("id")]
        public Guid Id { get; set; }

        [JsonProperty("title")]
        public string Title { get; set; }

        [JsonProperty("video")]
        public bool Video { get; set; }

        [JsonProperty("length")]
        public long Length { get; set; }
    }

    public partial class ReleaseEvent
    {
        [JsonProperty("date")]
        public DateTimeOffset Date { get; set; }

        [JsonProperty("area")]
        public Area Area { get; set; }
    }

    public partial class Area
    {
        [JsonProperty("iso-3166-1-codes")]
        public string[] Iso31661Codes { get; set; }

        [JsonProperty("id")]
        public Guid Id { get; set; }

        [JsonProperty("disambiguation")]
        public string Disambiguation { get; set; }

        [JsonProperty("sort-name")]
        public string SortName { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }
    }

    public partial class TextRepresentation
    {
        [JsonProperty("language")]
        public string Language { get; set; }

        [JsonProperty("script")]
        public string Script { get; set; }
    }

    public enum Disambiguation { Empty, Explicit };

    public partial class RecordingResponse
    {
        public static RecordingResponse FromJson(string json) => JsonConvert.DeserializeObject<RecordingResponse>(json, Brainz.Recording.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this RecordingResponse self) => JsonConvert.SerializeObject(self, Brainz.Recording.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                DisambiguationConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class ParseStringConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            long l;
            if (Int64.TryParse(value, out l))
            {
                return l;
            }
            throw new Exception("Cannot unmarshal type long");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (long)untypedValue;
            serializer.Serialize(writer, value.ToString());
            return;
        }

        public static readonly ParseStringConverter Singleton = new ParseStringConverter();
    }

    internal class DisambiguationConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Disambiguation) || t == typeof(Disambiguation?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "":
                    return Disambiguation.Empty;
                case "explicit":
                    return Disambiguation.Explicit;
            }
            throw new Exception("Cannot unmarshal type Disambiguation");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Disambiguation)untypedValue;
            switch (value)
            {
                case Disambiguation.Empty:
                    serializer.Serialize(writer, "");
                    return;
                case Disambiguation.Explicit:
                    serializer.Serialize(writer, "explicit");
                    return;
            }
            throw new Exception("Cannot marshal type Disambiguation");
        }

        public static readonly DisambiguationConverter Singleton = new DisambiguationConverter();
    }
}